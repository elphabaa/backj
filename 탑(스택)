 import java.io.BufferedReader;
 import java.io.InputStreamReader;
 import java.util.Stack;
 import java.util.StringTokenizer;

 public class Main {
     public static void main(String[] args) throws Exception {
         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
         int N = Integer.parseInt(br.readLine());
         int[] arr = new int[N];
         StringTokenizer st = new StringTokenizer(br.readLine(), " ");

         for (int i=0; i<N; i++) {
             arr[i] = Integer.parseInt(st.nextToken());
         }

         Stack<Integer> stack = new Stack<>();
         int[] result = new int[N];

         for (int i=0; i<N; i++) {

             while (!stack.isEmpty() && arr[stack.peek()] < arr[i]) {
                 stack.pop();
             }


             if (stack.isEmpty()) {
                 result[i] = 0;
             } else {
                 result[i] = stack.peek() + 1;
             }


             stack.push(i);
         }

         StringBuilder sb = new StringBuilder();
         for(int val : result){
             sb.append(val).append(" ");
         }
         System.out.println(sb.toString().trim());
     }
 }
 /*
 해당 문제는 처음으로 스택을 루프 안에 사용하면서 시간 복잡도를 최대한 줄여야 풀리는 문제였다.
 처음 문제에 접근했을 때, 알고리즘적으로는 맞았지만 시간 복잡도가 세제곱이 됐기 때문에 문제를 틀렸다.
 이 전의 실버 문제들까지는 스택을 직접적으로 어떻게 적용하고 진입해야할지 실질적인 고민을 하지 않아도 풀리는 문제들이었기 때문에 문제를 얕봤다가 큰 코 다친 문제였다.
 */
